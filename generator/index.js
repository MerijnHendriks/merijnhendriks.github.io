/** imports */
const fs = require("fs");
const path = require("path");
const CleanCSS = require("clean-css");
const htmlMinifier = require("html-minifier");
const { JSDOM } = require("jsdom");
const prism = require("prismjs");
const showdown = require("showdown");

/** Create a directory recursively */
function createDir(filepath)
{
    const target = filepath.substr(0, filepath.lastIndexOf("/"));
    fs.mkdirSync(target, { "recursive": true });
}

/** Write file to disk */
function writeFile(filepath, data)
{
    if (!fs.existsSync(filepath))
    {
        createDir(filepath);
    }

    fs.writeFileSync(filepath, data);
}

/** Read file from disk */
function readFile(filepath)
{
    return fs.readFileSync(filepath).toString();
}

/** Get all files in a directory */
function getFiles(filepath)
{
    return fs.readdirSync(filepath).filter((item) => {
        return fs.statSync(path.join(filepath, item)).isFile();
    });
}

/** Get filename without extension */
function getFilename(filepath)
{
    return filepath.split('.').slice(0, -1).join('.');
}

/** Minify html page */
function minifyHtml(html)
{
    return htmlMinifier.minify(html, {
        "collapseInlineTagWhitespace": true,
        "collapseWhitespace": true,
        "conservativeCollapse": true,
        "includeAutoGeneratedTags": false,
        "minifyCSS": true,
        "removeComments": true,
        "removeEmptyAttributes": true,
        "removeEmptyElements": true,
        "removeRedundantAttributes": true
    });
}

/** convert markdown to html */
function mdToHtml(md)
{
    const converter = new showdown.Converter({
        "ghCompatibleHeaderId": true
    });

    return converter.makeHtml(md);
}

/** Highlight codeblocks */
function highlightCode(document)
{
    const codes = document.querySelectorAll("code");

    for (const element of codes)
    {
        // language name is the first element
        const lang = element.className.split(" ")[0];

        if (!lang)
        {
            // no language defined
            continue;
        }

        if (!prism.languages[lang])
        {
            // load language if it wasnt loaded before
            require(`prismjs/components/prism-${lang}.js`);
        }

        element.classList.remove(lang);
        prism.highlightElement(element);
    }
}

/** Add background to (unformatted) codeblocks */
function addCodeBackground(document)
{
    const codes = document.querySelectorAll("code");

    for (const element of codes)
    {
        // language-* is the first element
        const lang = element.className.split(" ")[0] || "language-txt";

        if (element.parentElement.tagName === "PRE")
        {
            // move language class
            element.parentElement.classList.add(lang);
            element.classList.remove(lang);
        }
    }
}

/** Add bootstrap styling to blockquotes */
function addBlockquoteStyling(document)
{
    const blockquotes = document.querySelectorAll("blockquote");

    for (const element of blockquotes)
    {
        element.classList.add("blockquote", "blog-blockquote", "px-3");
    }
}

/** Add bootstrap styling to tables */
function addTableStyling(document)
{
    const tables = document.querySelectorAll("table");

    for (const element of tables)
    {
        element.classList.add("table", "table-bordered");
    }
}

/** Insert the article into the template */
function addBlogArticle(document, page)
{
    const element = document.getElementById("blog-content");
    const md = readFile(`./md/${page}.md`);
    element.innerHTML = mdToHtml(md);
}

/** Generate page */
function generatePage(file, page)
{
    const html = readFile("./html/template.html");
    const dom = new JSDOM(html);
    const document = dom.window.document;

    addBlogArticle(document, page);
    highlightCode(document);
    addCodeBackground(document);
    addBlockquoteStyling(document);
    addTableStyling(document);

    // add doctype to prevent quicks mode warning
    const result = document.documentElement.outerHTML;
    const minified = `<!DOCTYPE html>${minifyHtml(result)}`;

    writeFile(file, minified);
}

/** Generate all static pages */
function generateAllPages()
{
    const filepath = "./md";
    const pages = getFiles(filepath)

    // remove file extension
    for (let i = 0; i < pages.length; i++)
    {
        pages[i] = getFilename(pages[i]);
    }

    // generate pages
    for (const page of pages)
    {
        console.log(`Generating page: ${page}`);
        generatePage(`../${page}.html`, page);
    }
}

/** Generate css bundle */
function generateCssBundle()
{
    console.log("Generating file: css bundle");

    let files = getFiles("./css");

    // set path
    for (let i = 0; i < files.length; i++)
    {
        files[i] = `./css/${files[i]}`;   
    }

    // minify all into one stylesheet
    const minified = new CleanCSS().minify(files);
    writeFile(`../assets/css/bundle.css`, minified.styles);
}

/** Application logic */
function main()
{
    generateAllPages();
    generateCssBundle();
}

// run the code
main();
