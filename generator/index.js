var fs = require("fs");
var path = require("path");
var linkedom = require("linkedom");
var MarkdownIt = require("markdown-it");
var mediaPlugin = require("markdown-it-html5-media");
var prism = require("markdown-it-prism");
var CleanCSS = require("clean-css");
var htmlMinifier = require("html-minifier");

var domParser = new linkedom.DOMParser();
var md = new MarkdownIt()
  .use(mediaPlugin.html5Media)
  .use(prism, { "defaultLanguage": "txt" });
var cssMinifier = new CleanCSS();
var htmlMinifyOptions = {
  "collapseInlineTagWhitespace": true,
  "collapseWhitespace": true,
  "conservativeCollapse": true,
  "includeAutoGeneratedTags": false,
  "minifyCSS": true,
  "removeComments": true,
  "removeEmptyAttributes": true,
  "removeEmptyElements": true,
  "removeRedundantAttributes": true
};

function emptyCallback() {}

async function writeFile(filepath, data) {
  if (!fs.existsSync(filepath)) {
    // create missing directories recursively
    var target = filepath.substr(0, filepath.lastIndexOf("/"));
    await fs.mkdir(target, { "recursive": true }, emptyCallback);
  }

  await fs.writeFile(filepath, data, emptyCallback);
}

function readFile(filepath) {
  return fs.readFileSync(filepath).toString();
}

function getFiles(filepath) {
  var files = fs.readdirSync(filepath);
  var i = files.length;

  while (i--) {
    var item = path.join(filepath, files[i]);
    if (!fs.statSync(item).isFile()) {
      files.splice(i, 1);
    }
  }

  return files;
}

function getFilename(filepath) {
  return filepath.split('.').slice(0, -1).join('.');
}

function mdToHtml(markdown) {
  return md.render(markdown);
}

function addBlogArticle(document, filename) {
  var element = document.getElementById("blog-content");
  var markdown = readFile("./md/" + filename + ".md");
  element.innerHTML = mdToHtml(markdown);
}

function addBlockquoteStyling(document) {
  var blockquotes = document.querySelectorAll("blockquote");
  for (var i = 0; i < blockquotes.length; i++) {
    blockquotes[i].classList.add("blockquote", "blog-blockquote", "px-3");
  }
}

function minifyHtml(html) {
  return htmlMinifier.minify(html, htmlMinifyOptions);
}

function generatePage(filename) {
  var html = readFile("./html/template.html");
  var document = domParser.parseFromString(html);

  addBlogArticle(document, filename);
  addBlockquoteStyling(document);

  // add doctype to prevent quicks mode warning
  var result = "<!DOCTYPE html>" + document.documentElement.outerHTML;
  return minifyHtml(result);
}

async function generateAllPages() {
  var filepath = "./md";
  var files = getFiles(filepath);

  for (var i = 0; i < files.length; i++) {
    var filename = getFilename(files[i]);
    console.log("Generating page: " + filename);
    var html = generatePage(filename);
    await writeFile("../" + filename + ".html", html);
  }
}

async function generateCssBundle() {
  var files = getFiles("./css");

  for (var i = 0; i < files.length; i++) {
    // set correct path
    files[i] = "./css/" + files[i];
  }

  console.log("Generating file: css bundle");
  console.log(files);
  var minified = cssMinifier.minify(files);
  await writeFile("../assets/css/bundle.css", minified.styles);
}

async function main() {
  await generateAllPages();
  await generateCssBundle();
}

main();
